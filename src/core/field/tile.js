export class Tile{
    hasSameNeighbour = false;
    
    static minimalGroupCount;
    
    // –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Ç–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å–≥–æ—Ä–∞–Ω–∏—è, –ø–æ–¥–ª–µ–∂–∞—â–µ–≥–æ –∑–∞–º–µ—â–µ–Ω–∏—é (–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ VSCode —Å–º–æ—Ç—Ä–∏—Ç—Å—è)
    static EMPTYTILE = "üí•";

    /**
     * –ú–µ—Ç–æ–¥ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤–∑—Ä—ã–≤–∞ —Ç–∞–π–ª–æ–≤ –Ω–∞ —É–º–µ–Ω—å—à–∞—é—â—É—é—Å—è –≥–ª—É–±–∏–Ω—É —Ä–∞–¥–∏—É—Å–∞
     * @param {*} tile —Ç–µ–∫—É—â–∏–π —Ç–∞–π–ª –¥–ª—è –µ–≥–æ –≤–∑—Ä—ã–≤–∞
     * @param {*} position –±–∞–∑–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫—É–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–∑—Ä—ã–≤
     * @param {*} radius –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ä–∞–¥–∏—É—Å –≤–∑—Ä—ã–≤–∞
     * @returns –æ—á–∫–∏ –∑–∞ –≤–∑—Ä—ã–≤ —Ç–∞–π–ª–æ–≤ –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ—á–∫–∞–º–∏ –∑–∞ —Å–∞–º—É –±–æ–º–±—É
     */
    static firePairReturnScore(tile, position, radius, crossType=null){
        let score = 0;
        if(tile){
            score += 10;
            tile.setTypeAndSameNeighbour(position, Tile.EMPTYTILE);
            radius--;
            if(radius>0){
                score += Tile.firePairReturnScore(tile[position], position, radius, crossType);

                // –ï—Å–ª–∏ —É –Ω–∞—Å —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞ –Ω–µ –∫—Ä–µ—Å—Ç, –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å—Ç–æ–ª–±–µ—Ü, –∞ –ø—Ä–æ—Å—Ç–æ–π –≤–∑—Ä—ã–≤
                // –¢–æ–≥–¥–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                if(crossType==null && radius>1 && radius != Infinity){
                    let positions = ["left", "top", "right", "bottom"];
                    for(let pos of positions){
                        if(pos != position){
                            score += Tile.firePairReturnScore(tile[pos], position, 0, crossType);
                        }
                    }
                }
            } 
            
        }
        return score;
    }

    constructor({field={}, colorsCount, minimalGroupCount = 2}){
        this.field = field;
        this.tileType = Math.floor(Math.random() * colorsCount);
        Tile.minimalGroupCount = minimalGroupCount;
    }

    // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ü–≤–µ—Ç—É —Å —Å–æ—Å–µ–¥–æ–º –µ—Å—Ç—å, —É–∫–∞–∑–∞—Ç—å —á—Ç–æ —É —Ñ–∏—à–∫–∏ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞
    checkNeighbourTypeAndPush(neighbour){
        if(neighbour?.tileType === this.tileType && this.tileType != Tile.EMPTYTILE){
            this.hasSameNeighbour = neighbour.hasSameNeighbour = true;
        }
    }

    

    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–∏–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–∞–π–ª—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ç–∏–ø–∞
     * @param {*} direction - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ —Ç–∞–π–ª–∞
     * @param {*} type - —Ç–∏–ø —Ç–∞–π–ª–æ–≤ –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–¥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä –∫ –≤–∑—Ä—ã–≤—É
     * @param {*} depth - –≥–ª—É–±–∏–Ω–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —Ç–∞–π–ª–æ–≤
     */
    setTypeAndSameNeighbour(direction, type, depth){
        this.tileType = type;
        this.hasSameNeighbour = true;
        //let counter = depth-1;
        //if(counter>0 && this[direction] != null){
         //   this[direction].setTypeAndSameNeighbour(direction, type, --counter);
        //}
    }

    // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å (—Å–∂–µ—á—å) —Ñ–∏—à–∫—É –Ω–∞ –ø–æ–ª–µ –∏ –µ–µ —Å–æ—Å–µ–¥–µ–π, –µ—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç
    // {rate} –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—á–∫–æ–≤ –∑–∞ –Ω–∞–∂–∞—Ç—É—é —Ñ–∏—à–∫—É 
    fireTileReturnScore(rate=1, burnAnimationCallback=()=>{}){
        if(this._fireTileReturnScore.toString() != "_fireTileReturnScore(){}"){
        // –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ–ø—Ä–æ—Å—Ç–æ–π —Ç–∞–π–ª, –∞ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–≤—à–∏–π –º–µ—Ç–æ–¥ –≤–∑—Ä—ã–≤–∞
            console.log("this._fireTileReturnScore() from Tile");
            return this._fireTileReturnScore(rate, burnAnimationCallback);
        }
        
        let scoreToAdd = 0;
        if(this.hasSameNeighbour){
            this.hasSameNeighbour = false;
            if(this.left?.tileType == this.tileType && this.left?.hasSameNeighbour){
                scoreToAdd += this.left.fireTileReturnScore(rate, burnAnimationCallback);
                rate +=1;
            }
            if(this.top?.tileType == this.tileType && this.top?.hasSameNeighbour){
                scoreToAdd += this.top.fireTileReturnScore(rate, burnAnimationCallback);
                rate +=1;
            }
            if(this.right?.tileType == this.tileType && this.right?.hasSameNeighbour){
                scoreToAdd += this.right.fireTileReturnScore(rate, burnAnimationCallback);
                rate +=1;
            }
            if(this.bottom?.tileType == this.tileType && this.bottom?.hasSameNeighbour){
                scoreToAdd += this.bottom.fireTileReturnScore(rate, burnAnimationCallback);
                rate +=1;
            }
            this.tileType = Tile.EMPTYTILE;
            console.log(this.field);
            if(this.field != undefined){
                let position = this.field.getPositionOfTile(this);
                burnAnimationCallback(position.row, position.col);
            }
            scoreToAdd += 10 * rate;
        }
        return scoreToAdd;
    }
    _fireTileReturnScore(){}

    // –°–≤—è–∑–∞—Ç—å —Ñ–∏—à–∫—É —Å —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Ñ–∏—à–∫–∞–º–∏ —Å 4 —Å—Ç–æ—Ä–æ–Ω
    initNeighbours(left, top, right, bottom){
        this.left = left;
        if(left != null) this.left.right = this;
        this.top = top;
        if(top != null) this.top.bottom = this;
        this.right = right;
        if(right != null) this.right.left = this;
        this.bottom = bottom;
        if(bottom != null) this.bottom.top = this;
        this.checkNeighbours();
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π —Ç–µ–∫—É—â–µ–π —Ñ–∏—à–∫–∏ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ü–≤–µ—Ç—É
    checkNeighbours(){
        this.checkNeighbourTypeAndPush(this.left);
        this.checkNeighbourTypeAndPush(this.top);
        this.checkNeighbourTypeAndPush(this.right);
        this.checkNeighbourTypeAndPush(this.bottom);
    }
}